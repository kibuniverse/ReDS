// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function height(x) {
  if (x) {
    return x._3;
  } else {
    return 0;
  }
}

function create(l, v, r) {
  var hl = height(l);
  var hr = height(r);
  return /* Node */{
          _0: l,
          _1: v,
          _2: r,
          _3: hl > hr ? hl + 1 | 0 : hr + 1 | 0
        };
}

function bal(l, v, r) {
  var hl = height(l);
  var hr = height(r);
  if (hl > (hr + 2 | 0)) {
    if (l) {
      var lr = l._2;
      var lv = l._1;
      var ll = l._0;
      if (height(ll) >= height(lr)) {
        return create(ll, lv, create(lr, v, r));
      }
      if (lr) {
        return create(create(ll, lv, lr._0), lr._1, create(lr._2, v, r));
      }
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "avl.res",
              34,
              11
            ],
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "avl.res",
            34,
            11
          ],
          Error: new Error()
        };
  }
  if (hr <= (hl + 2 | 0)) {
    return create(l, v, r);
  }
  if (r) {
    var rl = r._0;
    var rr = r._2;
    if (height(rr) >= height(rl)) {
      return create(create(l, v, rl), r._1, rr);
    }
    if (rl) {
      return create(create(l, v, rl._0), rl._1, create(rl._2, r._1, r._2));
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "avl.res",
            40,
            11
          ],
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "avl.res",
          40,
          11
        ],
        Error: new Error()
      };
}

function add(x, tree) {
  if (!tree) {
    return /* Node */{
            _0: /* Empty */0,
            _1: x,
            _2: /* Empty */0,
            _3: 1
          };
  }
  var v = tree._1;
  if (x === v) {
    return tree;
  }
  var r = tree._2;
  var l = tree._0;
  if (x < v) {
    return bal(add(x, l), v, r);
  } else {
    return bal(l, v, add(x, r));
  }
}

exports.height = height;
exports.create = create;
exports.bal = bal;
exports.add = add;
/* No side effect */
